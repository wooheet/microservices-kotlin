{{- range splitList "#" $.Values.tag }}
{{- $tag := (split "%" . )._0 }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $.Values.service.name }}-{{ $tag }}
  namespace: {{ $.Values.namespace }}
  labels:
    app: {{ $.Values.service.name }}
    version: {{ $tag }}
spec:
  replicas: {{ $.Values.replicaCnt }}
  selector:
    matchLabels:
      app: {{ $.Values.service.name }}
      version: {{ $tag }}
  template:
    metadata:
      labels:
        app: {{ $.Values.service.name }}
        version: {{ $tag }}
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "false"
        sidecar.istio.io/proxyCPU: "{{ $.Values.istio.proxy.resources.request.cpu }}" # request
        sidecar.istio.io/proxyMemory: "{{ $.Values.istio.proxy.resources.request.memory }}"
        sidecar.istio.io/proxyCPULimit: "{{ $.Values.istio.proxy.resources.limit.cpu }}" # limit
        sidecar.istio.io/proxyMemoryLimit: "{{ $.Values.istio.proxy.resources.limit.memory }}"
        prometheus.io/scrape: "true"   # determines if a pod should be scraped. Set to true to enable scraping.
        prometheus.io/path: "{{ $.Values.service.prometheusPath }}" # determines the path to scrape metrics at. Defaults to /metrics.
        prometheus.io/port: "{{ $.Values.service.actuatorPort }}"
    spec:
      serviceAccountName: {{ $.Values.service.name }}
      nodeSelector:
        cloud.google.com/gke-nodepool: default
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                      - mysql
              topologyKey: "kubernetes.io/hostname"
      volumes:
        - name: google-cloud-key
          secret:
            secretName: {{ $.Values.service.credentials }}
        - configMap:
            name: otel-agent-conf
            items:
              - key: otel-agent-config
                path: otel-agent-config.yaml
          name: otel-agent-config-vol
      containers:
        - name: {{ $.Values.monitoring.name }}
          imagePullPolicy: Always
          image: "{{ $.Values.monitoring.image }}:{{ $.Values.monitoring.tag }}"
          resources:
            requests:
              memory: {{ $.Values.monitoring.resources.request.memory }}
              cpu: {{ $.Values.monitoring.resources.request.cpu }}
            limits:
              memory: {{ $.Values.monitoring.resources.limit.memory }}
              cpu: {{ $.Values.monitoring.resources.limit.cpu }}
          command:
            - "/otelcontribcol"
            - "--config=/conf/otel-agent-config.yaml"
            #           Memory Ballast size should be max 1/3 to 1/2 of memory.
          ports:
            - containerPort: {{ $.Values.monitoring.port.exporter }}
            - containerPort: {{ $.Values.monitoring.port.zipkin }}
            - containerPort: {{ $.Values.monitoring.port.zPages }}
            - containerPort: {{ $.Values.monitoring.port.health }}
          volumeMounts:
            - mountPath: /conf
              name: otel-agent-config-vol
            - name: google-cloud-key
              mountPath: /var/secrets/google
          livenessProbe:
            httpGet:
              port: {{ $.Values.monitoring.port.health }}
              path: /
              scheme: HTTP
          readinessProbe:
            httpGet:
              port: {{ $.Values.monitoring.port.health }}
              path: /
              scheme: HTTP
          env:
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /var/secrets/google/key.json
        - image: "{{ $.Values.image }}:{{ $tag }}"
          name: {{ $.Values.service.name }}
          imagePullPolicy: Always
          resources:
            requests:
              memory: {{ $.Values.resources.request.memory }}
              cpu: {{ $.Values.resources.request.cpu }}
            limits:
              memory: {{ $.Values.resources.limit.memory }}
              cpu: {{ $.Values.resources.limit.cpu }}
          ports:
            - containerPort: {{ $.Values.service.internalPort }}
              name: {{ $.Values.service.internalPortName }}
            - containerPort: {{ $.Values.service.actuatorPort }}
            - containerPort: 8511
          livenessProbe:
            httpGet:
              port: {{ $.Values.service.internalPort }}
              path: {{ $.Values.service.livenessPath }}
              scheme: HTTP
            initialDelaySeconds: {{ $.Values.liveness.initialDelaySeconds }}
            periodSeconds: {{ $.Values.liveness.periodSeconds }}
            timeoutSeconds: {{ $.Values.liveness.timeoutSeconds }}
            successThreshold: {{ $.Values.liveness.successThreshold }}
            failureThreshold: {{ $.Values.liveness.failureThreshold }}
          readinessProbe:
            httpGet:
              port: {{ $.Values.service.internalPort }}
              path: {{ $.Values.service.readinessPath }}
              scheme: HTTP
            initialDelaySeconds: {{ $.Values.readiness.initialDelaySeconds }}
            periodSeconds: {{ $.Values.readiness.periodSeconds }}
            timeoutSeconds: {{ $.Values.readiness.timeoutSeconds }}
            successThreshold: {{ $.Values.readiness.successThreshold }}
            failureThreshold: {{ $.Values.readiness.failureThreshold }}
          volumeMounts:
            - name: google-cloud-key
              mountPath: /var/secrets/google
          env:
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /var/secrets/google/key.json
            - name: JAVA_OPTS
              value:  -server -Xms1024m -Xmx1024m -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.port=8511 -Dcom.sun.management.jmxremote.rmi.port=8511 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.local.only=false -Djava.rmi.server.hostname=127.0.0.1
            - name: SPRING_PROFILE
              value: {{ $.Values.profile }}
  {{ end }}